PokemonShowdown (PHP/JS/HTML/CSS)

Le but de ce projet est de reproduire le site communautaire "pokémonShowdown" : https://play.pokemonshowdown.com/ en utilisant les concepts vue en cours de licence ainsi que l'utilisation du framework "Laravel"

POUR COMMENCER

Mon site internet n'est pas pour l'instant mis en ligne mais pour pouvoir l'afficher via un navigateur web, il vous faudra tout d'abord installer les pré-requis. Une fois correctement installé sur votre ordinateur, vous pourrez lancer votre docker en ouvrant le terminal dans la racine de votre docker et effectuer cette commande :
$ ./vendor/bin/sail up

Dans votre navigateur web, votre docker s'ouvre à cette endroit la :
http://localhost:8080/

PRE-REQUIS

Il faudra installer tout d'abord un docker :
  
  Pour installer un docker, il faudra d'abord installer composer ainsi que les dépendance requises pour laravel sur votre ordinateur via ces commandes :
  $ sudo apt update && sudo apt upgrade
  $ sudo apt install php php-common php-cli php-mbstring php-xml php-zip unzip
  $ cd ~
curl -sS https://getcomposer.org/installer -o composer-setup.php
sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
  $ sudo apt install php-curl

  Maintenant, vous pouvez installer docker sur votre pc :
  $ sudo apt install docker.io
  (Vous devtre probablement ajouter votre utilisateur au groupe docker)
  $ sudo usermod -aG docker ${USER}
  
  Maintenant, vous pourrez installer laravel sur votre ordinateur : 
  $ composer global require laravel/installer
  $ echo 'export PATH="$PATH:$HOME/.config/composer/vendor/bin"' >> ~/.bashrc
  $ source ~/.bashrc
 
IMPLEMENTER LA BASE DE DONNEE:

Tout d'abord il vous faut avoir l'application pokémon :

  Télécharger mon application de mon github : "pokemon-app3.zip"
  Une fois téléchargé, désarchiver et placer le dossier dans votre espace personnel de travail
  
Pour que le site web fonctionne bien, il faudra que vous implémentiez la base de donnée :
(Or, j'ai utilisé mariadb/phpmyadmin pour ce projet laravel ce qui n'est pas l'installation par défaut). 

  Tout d'abord, il faut utiliser sail qui sert à gérer la gestion de l'environnement de laravel :
  $ composer require laravel/sail --dev
  
  Ensuite installer mariadb([2]), phpmyadmin et générer le fichier .yml dans votre projet laravel :
  $ php artisan sail:install
  (Normalement, pour phpmyadmin si vous avez télécharger mon projet, il sera implémenter dans le fichier .yml)
  (De même la gestion des connexions est déjà régler dans le .env du projet)
  
  Aller sur phpmyadmin (identifiant : "sail", mot de passe : "password")
  localhost:80881
  Créer une base de donnée pokemon_db et implémenter les tables de pokemon_db.sql dans la base de donnée.
  (Notez qu'il est possible que sail n'est pas les droits de modifier ou d'utiliser votre base de données pour modifier ces droits, veuillez-vous connecter à phpmyadmin en tant que root (mot de passe : "password") et aller dans la gestion des utilisateurs et donner tout les droits à sail)

LANCER LE SITE WEB
  
Lancer le docker (l'application pokémon) via le terminal de votre dossier (à la racine) :
  
  $ ./vendor/bin/sail up

Test pour voir si tout fonctionne bien :
  Lancer via un navigateur web le site web suivant :
  http://localhost:8080/
  Une page affichant la liste des pokémons devraient s'afficher
  (Vous noterez que normalement, on lance un projet laravel via le port "80" mais je l'ai modifié pour le "8080" dans le fichier.yml car j'ai d'autre serveur web sur mon ordinateur)
  (Egalement, vous pourrez accéder à phpmyadmin via le port 8081, donc l'url : http://localhost:8081/ (pas besoin de nom de serveur , identifiant : sail , mot de passe : password))
  (Enfin, toute modification de l'utilisation de laravel est dûe au changement que j'ai effectué au docker, donc n'hésiter pas à voir le fichier .yml pour comprendre les changements)

RECHERCHE

Commande que j'ai utilisé pour créer le projet :
$ composer create-project laravel/laravel pokemon-app3

Création d'une classe
$ php artisan make:model Type

Calcul de dégats simple:
Dégâts = ((((2 * Niveau) / 5 + 2) * Puissance * Attaque / Défense) / 50) + 2
Sachant qu'ici on considère que tous les pokemons seront au niveau 100.

Voici, le tableau d'explication des augmentation ou de la diminution des statistiques d'un pokémon en fonction des attaques de status ou avec (buff/debuffs)

Niveau 	-6 	-5 	-4 	-3 	-2 	-1 	0  +1  +2  +3  +4  +5  +6
Fraction 	1/4 	2/7 	1/3 	2/5 	1/2 	2/3 	1  3/2 2  5/2  3  7/2  4
Pourcentage 	25% 	29% 	33% 	40% 	50% 	67% 	100%  150% 	200% 	250% 	300% 	350% 	400% 

Voici, l'un des meilleurs moyens pour avoir accès au bug du code via laravel : 
aller dans le projet Laravel, aller dans storage/logs et ouvrir le fichier laravel.log tous les erreurs y sont reportés comme les erreus http, js, syntaxe ...

Loi des types / table des types :
https://www.pokepedia.fr/Table_des_types

Commandes pour bien mettre à jour les caches,les routes...
$ php artisan route:clear
$ php artisan view:clear
$ php artisan optimize:clear
$ php artisan config:cache

EXPLICATION DES PAGES 

La 1er page (Le menu) :
Répresente la liste des pokémons de la base de données avec leurs statistiques.

La 2ème page (Combat1) :
M'a permis de faire de savoir comment utiliser un objet de façon très simplifier via laravel, d'utiliser du javascript très simple mais également de comprendre comment utiliser une navbar.

La 3ème page (Combat2) :
M'a permis de comprendre l'utilisation des formulaires (post) sous laravel, d'utiliser de l'aléatoire,  de réutiliser également combat2.
C'est une page qui vous propose de faire un choix d'un pokémon parmi ceux dans la base de donnée et qui va une fois choisie le faire 'combattre' contre un autre personnage (forcément un autre)

La 4ème page (Liste pokemon 2) :
J'ai à partir de cette page compléter ma base de donnée pour inclure les types, et réussie à comprendre comment fusionner les tables pour les utiliser dans ma page web.
C'est une page qui affiche la liste des pokémons avec leurs statistiques et leurs types ainsi que l'ensemble des types.

La 5ème page (Liste pokemon 3) :
M'a permis d'implémenter dans ma base de donnée mes attaques, et de pouvoir comprendre comment donner plusieurs attributs multiples à mes pokémons.
C'est une page qui affiche la liste des pokémons avec leurs statistiques, types et leurs attaques.

La 6ème page (Liste type) :
Affiche l'ensemble des types.

La 7ème page (Liste attaque) :
Affiche l'ensemble des attaque ainsi que leurs caractéristiques. 

La 8ème page (Combat 3) :
J'ai commencé a faire mes combats de facon mieux faite, on peut choisir l'attaque a utilisé, il y a l'utilisation du calculateur de dégâts de la partie recherche.
Sachant que les attaques de statuts ne fonctionne pas et infliges des dégâts dû au calculateur de dégâts.

La 9ème page (Combat 4) :
C'est une page avec beaucoup d'améliorations mais pas très visible, les attaques de statuts sur les ennemies ainsi que les alliés sont maintenant disponibles (rugissement par exemple) 
il est donc maintenant possible de modifier les statistiques du pokémon ennemie et allie en combat de facon dynamique (grâce au principe de session qui permet d'initialiser les stats des pokemons au début et de les reinitialiser a la fin) 
en suivant le tableau d'amélioration/diminution des statistiques d'un pokémon au cours d'un combat (partie recherche), il y a donc aussi eu pas mal de modifications sur la base de donnée;
Il y a maintenant aussi la différenciation entre attaque spéciale et attaque physique qui utilise de façon respective (attaque, attaquespéciale) du pokémon pour infliger des dégâts et qui est résiter 
de facon respective par la (défense, défensespéciale du pokémon adverse)
Il y a eu aussi l'implémentation de pas mal de nouveaux concepts dans la base de donnée qui sera mieux utilisés dans les combats d'après 
(coups critiques, effet de statut, probabilité effet...)

La base de donnée de la gestion de types est rajouté 11/05
Les attaques sont bien influencés par les types 11/05
Les messages d'efficacité sont affiché sur la page lorsque c'est super efficace, pas très efficace ...  12/05
Ajout du stab , ainsi que son affichage 12/05
Ajout du coup critique 12/05

Gestion des 4 attaques validé
Alors j'ai compris comment fonctionne github, vraiment pour partager son code mais aussi intérager avec lui a distance (clé api, git clone ...)
J'ai égalment compris comment transférer un projet laravel sur un github à l'aide de git
initialiser un dépot git dans le projet : git init
ajouter tous les nouveau fichiers 
J'ai compris comment fonctionne laravel forge bien qu'il m'ait été inutile comme j'ai fait mon projet sous docker et je ne l'ai compris que très tard
J'ai compris que c'était un hébergeur, hetzner cloud, comment fonctionne les tarifs, ce qui est demandé , ce que propose le service. 
Une fois que j'ai compris tout ca , j'ai donc du intéragir avec serveur.
J'ai réapris a me connecter a un serveur a distance via ssh (en générant une clé sur mon pc : ssh-keygen -t rsa, puis l'afficher pour la copier :
cat ~/.ssh/id_rsa.pub)
,j'ai ensuite du implémenter tout ce qui était nécessaire a mon projet, docker, php,
mariadb, composer ... a distance et enfin le faire tourner ... 
Une fois implémenter j'ai du comprendre comment implémenter ma base de donnée en distanciel , enfaite il faut l'inclure diretement dans le projet 
docker cp database/pokemon_db.sql pokemon-app3_mariadb_1:/pokemon_db.sql
et le mettre dans la database mariadb via la commande.
et j'ai du rerentrer dans le shell du conteneur docker : docker exec -it pokemon-app3_mariadb_1 bash
et importer fichier . sql dans mysql : mysql -u sail -p password pokemon_db < /pokemon_db.sql
Une fois ca, j'ai du comprendre ou est situé mon site-web, car je n'ai pas de nom de domaine pour l'instant, j'ai donc du comprendre que 
c'est grâce à l'adresse ip du serveur, que je peux me connecter a mon site web, mais également comme je l'ai fais sous docker, il va tourner 
sur l'un des ports de celui-ci donc que je dois rajouter a l'adresse ip 


composer require pusher/pusher-php-server

Laravel Echo est une bibliothèque JavaScript qui facilite l'abonnement aux canaux et l'écoute des événements de diffusion dans Laravel. Vous pouvez l'installer via npm :
npm install --save laravel-echo pusher-js

Questoin: j'arrive a le faire tourner en me connectant a mon serveur via ssh, mais lorsque je vais éteindre mon pc, le terminal va donc s'arreter
et donc mon code également. je ne vois aps trop comment faire.

Pub Sub or RPC, moi j'utiliserai le RPC car c'est plus utile malgré que ca ressemble beaucoup a une requete HTTP.

Il y a un screen plus vidéo du ws
J'ai utilisé ca car laravel-websockets est gratuit, peut utiliser du php pour la transmission d'informations
composer require beyondcode/laravel-websockets
Publish sa configuration :
php artisan vendor:publish

Oui, l'erreur semble provenir de votre fichier .env.

Dans votre fichier .env, DB_HOST est défini comme mariadb, ce qui indique à Laravel de chercher un serveur de base de données à cette adresse. Cependant, mariadb n'est probablement pas une adresse valide dans votre réseau.

Si votre base de données MySQL (ou MariaDB) est hébergée sur le même serveur que votre application Laravel, vous devez modifier DB_HOST pour qu'il soit localhost ou 127.0.0.1.

Si votre base de données est sur un serveur différent, DB_HOST doit être l'adresse IP ou le nom d'hôte du serveur de base de données.

Assurez-vous également que DB_PORT est correct. Le port par défaut pour MySQL et MariaDB est 3306, mais si votre serveur de base de données est configuré pour utiliser un port différent, vous devrez le modifier en conséquence.

Une fois que vous avez fait ces modifications, n'oubliez pas de redémarrer le serveur Laravel pour qu'il prenne en compte les nouvelles valeurs de configuration. Vous pouvez le faire en exécutant php artisan config:clear pour effacer le cache de configuration et php artisan config:cache pour regénérer le cache avec les nouvelles valeurs.

C'était bien l'adresse ip a mettre

N'hésitez pas à vous documenter sur le site laravel pour mieux comprendre ce framework ainsi que son installation :
https://laravel.com/docs/10.x

  
